(
  record {
    // ecdsa_key_id specifies the threshold key to use for signing transactions.
    // currently, it is set to the key only present when running dfx locally.
    ecdsa_key_id = record {
      name = "dfx_test_key";
      curve = variant { secp256k1 };
    };
    // rpc_service specifies the RPC service to use for interacting with the EVM.
    rpc_service = variant {
      Custom = record {
        url = "https://testnet-rpc.monad.xyz";
        headers = null;
      }
    };
    // filter_addresses specifies the contract addresses we'd like to listen on for events
    filter_addresses = vec { 
      "0xa41D586530BC7BC872095950aE03a780d5114445";  // Monad Peridot contract
      "0xe797A0001A3bC1B2760a24c3D7FDD172906bCCd6";  // BNB Peridot contract
    };
    // chain_id specifies the chain ID of the EVM we're interacting with.
    chain_id = 41454 : nat64;  // Monad testnet
    // filter_events specifies the events we'd like to listen to on the EVM.
    filter_events = vec { 
      "Mint(address,uint256,uint256)";
      "Redeem(address,uint256,uint256)";
      "Borrow(address,uint256,uint256,uint256)";
      "RepayBorrow(address,address,uint256,uint256,uint256)";
      "LiquidateBorrow(address,address,uint256,address,uint256)";
    };
  }
) 